import Head from "next/head";
import React, { useReducer, useState } from "react";
import { v4 as uuidv4 } from "uuid";
import InputText from "../components/InputText";
// import { txt } from "../interfaces/dataInterface";
import PopUpCard from "../components/PopUpCard";
import Navigations from "../components/Navigations";
import AccessBar from "../components/AccessBar";
import textReducer from "../reducers/TextValues";

interface txt {
  id: string;
  value: string;
  isHeader: boolean;
}

const Home = () => {
  // set needed states and reducer initialization
  const initaltext: txt[] = [];
  const [currentInput, setCurrentInput] = useState("");
  const [testingData, dispatchData] = useReducer(textReducer, initaltext);
  const [useBigInp, setUseBigInp] = useState(false);
  const [editable, seteditable] = useState("");

  // handle what happens when the user submit the input form
  const handleInputSubmit = (event: React.FormEvent<HTMLFormElement>) => {
    event.preventDefault();

    if (isH1(currentInput)) {
      setUseBigInp(true);
      currentInput.length > 3 &&
        dispatchData({
          type: "ADD_TEXT",
          payload: {
            id: uuidv4(),
            value: currentInput.substring(0, currentInput.length - 2),
            isHeader: useBigInp,
          },
        });
      setCurrentInput("");
      return;
    } else {
      if (currentInput)
        dispatchData({
          type: "ADD_TEXT",
          payload: {
            id: uuidv4(),
            value: currentInput,
            isHeader: useBigInp,
          },
        });
      setCurrentInput("");
      useBigInp && setUseBigInp(false);
    }
  };

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setCurrentInput(event.target.value);
  };

  const handleUpdateTxt = (value: txt) => {
    if (editable === "") {
      dispatchData({
        type: "DELETE_TEXT",
        payload: {
          ...value,
          value: editable,
        },
      });
    } else {
      dispatchData({
        type: "UPDATE_TEXT",
        payload: {
          ...value,
          value: editable,
        },
      });
    }
  };

  const isH1 = (txt: string) => {
    return (
      txt[txt.length - 1] === "/" ||
      txt.substring(txt.length - 2, txt.length) === "/1"
    );
  };

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <>
          <Navigations />
          <div className="max-w-2xl m-auto">
            <AccessBar />
            <h1
              id="header"
              className="text-4xl border-b-2 p-2 mt-8 mb-5 font-bold"
            >
              Front-end developer test project
            </h1>
            <p className="text-gray-600">
              Your goal is to make a page that looks exactly like this one, and
              has the ability to create H1 text simply by typing / then, typing
              text, and hitting enter.
            </p>

            <div className="displayContainer pt-8">
              {testingData.length
                ? testingData.map((data: txt) => (
                    <InputText
                      key={data.id}
                      value={data}
                      textClasses={
                        data.isHeader ? "text-2xl font-bold" : "outline-none"
                      }
                      handleUpdae={handleUpdateTxt}
                      setEditable={seteditable}
                      isH1={isH1(editable) && data.value === editable}
                    />
                  ))
                : ""}

              <form onSubmit={handleInputSubmit}>
                <input
                  type="text"
                  className={
                    useBigInp
                      ? "outline-none py-2 mt-8 text-2xl font-bold"
                      : "outline-none mt-8"
                  }
                  placeholder={
                    useBigInp
                      ? "Heading 1"
                      : "type / for blocks, @ to link docs or people"
                  }
                  value={currentInput}
                  onChange={handleInputChange}
                />
                {isH1(currentInput) && (
                  <PopUpCard
                    dispatch={() => {
                      if (isH1(currentInput)) {
                        setUseBigInp(true);
                        currentInput.length > 3 &&
                          dispatchData({
                            type: "ADD_TEXT",
                            payload: {
                              id: uuidv4(),
                              value: currentInput.substring(
                                0,
                                currentInput.length - 2
                              ),
                              isHeader: useBigInp,
                            },
                          });
                        setCurrentInput("");
                        return;
                      }
                    }}
                  />
                )}
              </form>
            </div>
          </div>
        </>
      </main>
    </div>
  );
};

export default Home;
